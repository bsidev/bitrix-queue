<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <defaults public="false"/>

        <!-- Asynchronous -->
        <service id="messenger.senders_locator" class="Symfony\Component\Messenger\Transport\Sender\SendersLocator">
            <argument type="collection"/> <!-- Per message senders map -->
            <argument/> <!-- senders service locator -->
        </service>
        <service id="messenger.middleware.send_message" class="Symfony\Component\Messenger\Middleware\SendMessageMiddleware">
            <argument type="service" id="messenger.senders_locator"/>
            <argument type="service" id="event_dispatcher"/>
            <call method="setLogger">
                <argument type="service" id="logger" on-invalid="ignore"/>
            </call>
        </service>

        <!-- Message encoding/decoding -->
        <service id="messenger.default_serializer" class="Symfony\Component\Messenger\Transport\Serialization\PhpSerializer"/>

        <!-- Middleware -->
        <service id="messenger.middleware.handle_message" class="Symfony\Component\Messenger\Middleware\HandleMessageMiddleware" public="false" abstract="true">
            <argument/> <!-- Bus handler resolver -->
            <call method="setLogger">
                <argument type="service" id="logger" on-invalid="ignore"/>
            </call>
        </service>

        <service id="messenger.middleware.add_bus_name_stamp" class="Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware" abstract="true"/>

        <service id="messenger.middleware.add_uuid_stamp" class="Bsi\Queue\Middleware\AddUuidStampMiddleware"/>

        <service id="messenger.middleware.dispatch_after_current_bus" class="Symfony\Component\Messenger\Middleware\DispatchAfterCurrentBusMiddleware"/>

        <service id="messenger.middleware.reject_redelivered_message" class="Symfony\Component\Messenger\Middleware\RejectRedeliveredMessageMiddleware"/>

        <service id="messenger.middleware.failed_message_processing" class="Symfony\Component\Messenger\Middleware\FailedMessageProcessingMiddleware"/>

        <service id="messenger.middleware.traceable" class="Symfony\Component\Messenger\Middleware\TraceableMiddleware" abstract="true">
            <argument type="service" id="debug.stopwatch"/>
        </service>

        <!-- Discovery -->
        <service id="messenger.receiver_locator">
            <tag name="container.service_locator"/>
            <argument type="collection"/>
        </service>

        <!-- transports -->
        <service id="messenger.transport_factory" class="Symfony\Component\Messenger\Transport\TransportFactory">
            <argument type="tagged_iterator" tag="messenger.transport_factory"/>
        </service>

        <service id="messenger.transport.sync.factory" class="Symfony\Component\Messenger\Transport\Sync\SyncTransportFactory">
            <tag name="messenger.transport_factory"/>
            <argument type="service" id="messenger.routable_message_bus"/>
        </service>

        <service id="messenger.transport.in_memory.factory" class="Symfony\Component\Messenger\Transport\InMemoryTransportFactory">
            <tag name="messenger.transport_factory"/>
        </service>

        <service id="messenger.transport.bitrix.factory" class="Bsi\Queue\Transport\Bitrix\BitrixTransportFactory">
            <tag name="messenger.transport_factory"/>
        </service>

        <!-- retry -->
        <service id="messenger.retry_strategy_locator">
            <tag name="container.service_locator"/>
            <argument type="collection"/>
        </service>

        <service id="messenger.retry.abstract_multiplier_retry_strategy" class="Symfony\Component\Messenger\Retry\MultiplierRetryStrategy" abstract="true">
            <argument/> <!-- max retries -->
            <argument/> <!-- delay ms -->
            <argument/> <!-- multiplier -->
            <argument/> <!-- max delay ms -->
        </service>

        <!-- worker event listeners -->
        <service id="messenger.retry.send_failed_message_for_retry_listener" class="Symfony\Component\Messenger\EventListener\SendFailedMessageForRetryListener">
            <argument/> <!-- senders service locator -->
            <argument type="service" id="messenger.retry_strategy_locator"/>
            <argument type="service" id="logger" on-invalid="ignore"/>
        </service>

        <service id="messenger.failure.send_failed_message_to_failure_transport_listener" class="Symfony\Component\Messenger\EventListener\SendFailedMessageToFailureTransportListener">
            <argument/> <!-- Failure transport -->
            <argument type="service" id="logger" on-invalid="ignore"/>
        </service>

        <service id="messenger.listener.dispatch_pcntl_signal_listener" class="Symfony\Component\Messenger\EventListener\DispatchPcntlSignalListener"/>

        <service id="messenger.listener.stop_worker_on_restart_signal_listener" class="Symfony\Component\Messenger\EventListener\StopWorkerOnRestartSignalListener">
            <argument type="service" id="cache.messenger.restart_workers_signal"/>
            <argument type="service" id="logger" on-invalid="ignore"/>
        </service>

        <service id="messenger.listener.stop_worker_on_sigterm_signal_listener" class="Symfony\Component\Messenger\EventListener\StopWorkerOnSigtermSignalListener"/>

        <!-- routable message bus -->
        <service id="messenger.routable_message_bus" class="Symfony\Component\Messenger\RoutableMessageBus" public="true">
            <argument/> <!-- Message bus locator -->
            <argument type="service" id="messenger.default_bus"/>
        </service>

        <!-- console -->
        <service id="cache.messenger.restart_workers_signal" class="Bsi\Queue\Cache\BitrixCacheAdapter"/>

        <service id="console.command.messenger_consume_messages" class="Symfony\Component\Messenger\Command\ConsumeMessagesCommand" public="true">
            <argument/> <!-- Routable message bus -->
            <argument type="service" id="messenger.receiver_locator"/>
            <argument type="service" id="event_dispatcher"/>
            <argument type="service" id="logger" on-invalid="null"/>
            <argument type="collection"/> <!-- Receiver names -->

            <tag name="console.command" command="messenger:consume"/>
        </service>

        <service id="console.command.messenger_debug" class="Symfony\Component\Messenger\Command\DebugCommand" public="true">
            <argument type="collection"/> <!-- Message to handlers mapping -->
            <tag name="console.command" command="debug:messenger"/>
        </service>

        <service id="console.command.messenger_stop_workers" class="Symfony\Component\Messenger\Command\StopWorkersCommand" public="true">
            <argument type="service" id="cache.messenger.restart_workers_signal"/>
            <tag name="console.command" command="messenger:stop-workers"/>
        </service>

        <service id="console.command.messenger_failed_messages_retry" class="Symfony\Component\Messenger\Command\FailedMessagesRetryCommand" public="true">
            <argument/> <!-- Receiver name -->
            <argument/> <!-- Receiver -->
            <argument type="service" id="messenger.routable_message_bus"/>
            <argument type="service" id="event_dispatcher"/>
            <argument type="service" id="logger" on-invalid="ignore"/>

            <tag name="console.command" command="messenger:failed:retry"/>
        </service>

        <service id="console.command.messenger_failed_messages_show" class="Symfony\Component\Messenger\Command\FailedMessagesShowCommand" public="true">
            <argument/> <!-- Receiver name -->
            <argument/> <!-- Receiver -->

            <tag name="console.command" command="messenger:failed:show"/>
        </service>

        <service id="console.command.messenger_failed_messages_remove" class="Symfony\Component\Messenger\Command\FailedMessagesRemoveCommand" public="true">
            <argument/> <!-- Receiver name -->
            <argument/> <!-- Receiver -->

            <tag name="console.command" command="messenger:failed:remove"/>
        </service>
    </services>
</container>
